@use 'modules/font' as fonts;
@use 'modules/animation' as animation;
@use 'shared-components/theme-engine/theme' as theme;
@import './scrollbar';
@import './functions';

@import-normalize;

@import 'variables';

html {
  overflow: hidden;
}

body {
  height: 100vh;
  overscroll-behavior-y: none;
  margin: 0;
  font-family: fonts.$font-family, 'Helvetica Neue Ultra Light', Helvetica, Arial, 'Lucida Grande', 'sans-serif';
  color: theme.$font-color-primary;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  background-color: #0a0a0a;
  background-image: transparent;
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center top;

  --box-radius: 16px;
  // ToDo: consolidate to -duration-half variant (below) this is used in component library
  --animation-time-short: 0.2s;
  // ToDo: consolidate to -duration variant (below) this is used in component library
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;
}

A {
  text-decoration: none;
}

a,
button {
  color: inherit;
}

.border-primary {
  border: 1px solid var(--dialog-border-color);
  border-collapse: separate;
  box-shadow: 0 0 16px 0 var(--dialog-drop-shadow-color);
}

hr.glow {
  position: relative;
  height: 1px;
  border: none;
  background-color: var(--glow-background-color);
}

hr.glow:after {
  right: 0;
}

hr.glow:after,
hr.glow:before {
  content: ' ';
  position: absolute;
  top: 0;
  height: 1px;
  width: 8px;
  background-color: var(--glow-transition-background-color);
}

.glow-text {
  text-shadow: 0 0 10px var(--glow-text-color);
}

* {
  @include scrollbar();
}

.button-reset {
  cursor: pointer;
  background: none;
  border: none;
  display: inline-block;
}

// This ensures the DropdownMenu is always on top of everything else
// Note: This is not a great way to do this because it implies that we know exactly
// what zUI is doing under the hood and that this is exactly what radix will always do
// (we shouldn't even know it's radix). I think the better solution is to expose an
// attribute on the DropdownMenu that allows us to set the "popup" container node,
// and add a permanent node at the root level and set it as the popup container.
// Using this method for now due to time constraints.
[data-radix-popper-content-wrapper] {
  z-index: 10001 !important;
}
